Guy, Donal,

I wanted to provide some further context and clarification to the Use Cases spec that I have been referencing in Tundro Github issues.  I am attaching the latest version here for easy access but it has been committed to the Igoo repository in Github and is also  in the Google Drive under Projects -> Field Service Management - Multi Purpose.

This document was created to help alleviate some of the ambiguity and confusion of the original demo deliverables.  Hopefully the detail will prove helpful in doing that.  The applicable user stories and their row numbers to each case are above the workflow.  It was originally created with wireframes and the old made up jobs that Congiance had come up with detailing potential interactions across each use case.  To avoid confusion between the wireframes and visual design screens I had them drop visual design screens over the wireframes.

There was a point in doing this that we realized there was going to be a lot of extra visual design work for similar screens to completely replace all wireframes.  As these deliverables were already quite late and I didn’t feel this was a good use of GOFACTORY funds, we agreed to drop in only the unique screens to support the various use cases and leave the wireframes alone that would tie back to a unique visual design screen that had been defined elsewhere in the document.  The unique visual design screens are highlighted with the pink text above the screens.  The name in pink matches the screen in the Zeplin project and the screens in Github that were committed to Igoo at the same time as the document so they are easier to find.  The mix of visual design screens and wireframes does create some confusing context but hopefully it won’t prove too challenging.  Please ask if anything is unclear.

I will attempt to write up Github issues against the latest APK vs the designs by Monday night each week.  I am trying to improve the detail of the issues and provide Zeplin links to avoid you guys have to search around for too much of the information.  I would like to improve on this process as much as possible so your feedback on how we can improve it is most welcome.  I am going to do the same for Zok on the web client and ideally want SDK and backend dependencies to percolate from these requirements so it would be good if we can refine the process as much as possible with Tundro.

It’s hard for me to assess the time required for each issue and I would rather you guys focus on getting work done rather than providing estimates so for the time being I will typically just mark bugs and enhancements either “Priority - Next Release" for the higher priority items and “Priority - Upcoming Release”  for medium priority items using the Github issue labels.  We can see how this works for now and then evolve as needed.
